'''Генератор помогает тут, в отличии от
создания списка т.к. список создается сразу, а
генератор во время распаковки.'''

print(*(input() for _ in "___"), sep=input())

'''Тут фокус именно в создании объекта, под названием генератор, и оператора распаковки "*",
вот тут (input() for _ in "___") сам генератор, но он начинает выполнение своего кода 
последовательно и только в момент своего вызова, т.е. мы его описали, но еще не вызвали, 
а в sep=input() вызов пользовательского ввода происходит сразу, и главная 
ососбенность это распаковка с помощью "*", распаковка выполняется всегда в самый последний момент.
Таким образом сначала создается генератор, 
потом добавляется разделитель, потом запускается распаковка и в процессе 
распаковки уже происходит вызов пользовательского ввода.
Важно в дальнейшем различать:
генератор (input() for _ in "___")
и списочные выражения [input() for _ in "___"]
т.к. у них разный способ работы.'''


print(input().join([input() for _ in range(3)]))

lst = [input() for _ in range(4)]
print(*lst[1:], sep=lst[0])



a = input()
b = input()
c = input()
d = input()
print(b,c,d, sep = a)


s=input()
print(input(),input(),input(), sep = s)



a, b, c, d = input(), input(), input(), input()
print(b, c, d, sep=a)



separator, *args = [input() for _ in range(4)]
print(*args, sep=separator)

'''Текст separator, *args = означает следующее: 
Питон там справа от знака равно что-то будет, ты это распакуй, 
то что будет первым запиши в переменную  separator, 
а все остальное ( я совершенно не знаю, что там будет и 
поэтому перед названием переменной поставил звездочку) 
запихни в переменную args.'''


lst = [input() for _ in range(4)]
print(*lst[1:], sep=lst[0])